#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_SK_Ant

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "CrabChampions_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_SK_Ant.AnimBP_SK_Ant_C
// 0x02E0 (0x05C0 - 0x02E0)
class UAnimBP_SK_Ant_C final : public UCrabEnemyAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02E8(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0318(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0360(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0388(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x03B0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0430(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0460(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x04E0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0510(0x00B0)()

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_SK_Ant_AnimGraphNode_SequencePlayer_D2AABB1245CF5D4315EE3682432C4FC1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_SK_Ant_AnimGraphNode_TransitionResult_EFD531AF4CCCF35426237183F9A8C589();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_AnimBP_SK_Ant_AnimGraphNode_TransitionResult_7D0F405F45D240C59EC504B10106FE14();
	void ExecuteUbergraph_AnimBP_SK_Ant(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_SK_Ant_C">();
	}
	static class UAnimBP_SK_Ant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_SK_Ant_C>();
	}
};
static_assert(alignof(UAnimBP_SK_Ant_C) == 0x000010, "Wrong alignment on UAnimBP_SK_Ant_C");
static_assert(sizeof(UAnimBP_SK_Ant_C) == 0x0005C0, "Wrong size on UAnimBP_SK_Ant_C");
static_assert(offsetof(UAnimBP_SK_Ant_C, UberGraphFrame) == 0x0002E0, "Member 'UAnimBP_SK_Ant_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_Root) == 0x0002E8, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_Slot) == 0x000318, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_TransitionResult_1) == 0x000360, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_TransitionResult) == 0x000388, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_SequencePlayer_1) == 0x0003B0, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_StateResult_1) == 0x000430, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_SequencePlayer) == 0x000460, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_StateResult) == 0x0004E0, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAnimBP_SK_Ant_C, AnimGraphNode_StateMachine) == 0x000510, "Member 'UAnimBP_SK_Ant_C::AnimGraphNode_StateMachine' has a wrong offset!");

}

