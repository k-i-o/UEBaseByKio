#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrabChampions

#include "Basic.hpp"

#include "CrabChampions_classes.hpp"
#include "CrabChampions_parameters.hpp"


namespace SDK
{

// Function CrabChampions.CrabTurret.OnRep_IsExploded
// (Final, Native, Protected)

void ACrabTurret::OnRep_IsExploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTurret", "OnRep_IsExploded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTurret.OnRep_OwningC
// (Final, Native, Protected)

void ACrabTurret::OnRep_OwningC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTurret", "OnRep_OwningC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabCosmeticSlotUI.OnHoveredSlotButton
// (Final, Native, Protected)

void UCrabCosmeticSlotUI::OnHoveredSlotButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabCosmeticSlotUI", "OnHoveredSlotButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabCosmeticSlotUI.OnPressedSlotButton
// (Final, Native, Protected)

void UCrabCosmeticSlotUI::OnPressedSlotButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabCosmeticSlotUI", "OnPressedSlotButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyModifierUI.OnHoveredDifficultyModifierButton
// (Final, Native, Protected)

void UCrabDifficultyModifierUI::OnHoveredDifficultyModifierButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyModifierUI", "OnHoveredDifficultyModifierButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyModifierUI.OnPressedDifficultyModifierButton
// (Final, Native, Protected)

void UCrabDifficultyModifierUI::OnPressedDifficultyModifierButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyModifierUI", "OnPressedDifficultyModifierButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabFocusMenuUI.OnPressedActionButton
// (Final, Native, Protected)

void UCrabFocusMenuUI::OnPressedActionButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabFocusMenuUI", "OnPressedActionButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabFocusMenuUI.OnPressedBackButton
// (Final, Native, Protected)

void UCrabFocusMenuUI::OnPressedBackButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabFocusMenuUI", "OnPressedBackButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabFocusMenuUI.OnPressedResetFocusButton
// (Final, Native, Protected)

void UCrabFocusMenuUI::OnPressedResetFocusButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabFocusMenuUI", "OnPressedResetFocusButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabConfirmationPromptUI.OnHoveredNoButton
// (Final, Native, Protected)

void UCrabConfirmationPromptUI::OnHoveredNoButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabConfirmationPromptUI", "OnHoveredNoButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabConfirmationPromptUI.OnHoveredYesButton
// (Final, Native, Protected)

void UCrabConfirmationPromptUI::OnHoveredYesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabConfirmationPromptUI", "OnHoveredYesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabConfirmationPromptUI.OnPressedNoButton
// (Final, Native, Protected)

void UCrabConfirmationPromptUI::OnPressedNoButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabConfirmationPromptUI", "OnPressedNoButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabConfirmationPromptUI.OnPressedYesButton
// (Final, Native, Protected)

void UCrabConfirmationPromptUI::OnPressedYesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabConfirmationPromptUI", "OnPressedYesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.ClientKnockback
// (Net, Native, Event, Public, NetClient)
// Parameters:
// struct FVector_NetQuantizeNormal        Dir                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabC::ClientKnockback(const struct FVector_NetQuantizeNormal& Dir, float Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "ClientKnockback");

	Params::CrabC_ClientKnockback Parms{};

	Parms.Dir = std::move(Dir);
	Parms.Strength = Strength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.OnRep_ChainedToC
// (Final, Native, Protected)

void ACrabC::OnRep_ChainedToC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "OnRep_ChainedToC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.OnRep_DebuffState
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FCrabDebuffState                 PreviousDebuffState                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACrabC::OnRep_DebuffState(const struct FCrabDebuffState& PreviousDebuffState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "OnRep_DebuffState");

	Params::CrabC_OnRep_DebuffState Parms{};

	Parms.PreviousDebuffState = std::move(PreviousDebuffState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.OnRep_IsEliminated
// (Final, Native, Protected)

void ACrabC::OnRep_IsEliminated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "OnRep_IsEliminated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.OnRep_IsInvulnerable
// (Final, Native, Protected)

void ACrabC::OnRep_IsInvulnerable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "OnRep_IsInvulnerable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.ServerClientAuthoritativeMove
// (Net, Native, Event, Public, NetServer)
// Parameters:
// struct FClientAuthoritativeMoveData     MoveData                                               (ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ACrabC::ServerClientAuthoritativeMove(const struct FClientAuthoritativeMoveData& MoveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "ServerClientAuthoritativeMove");

	Params::CrabC_ServerClientAuthoritativeMove Parms{};

	Parms.MoveData = std::move(MoveData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.ServerDealDamage
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<struct FCrabDamageInfo>          DamageInfoArray                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ACrabC::ServerDealDamage(const TArray<struct FCrabDamageInfo>& DamageInfoArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "ServerDealDamage");

	Params::CrabC_ServerDealDamage Parms{};

	Parms.DamageInfoArray = std::move(DamageInfoArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.ServerOnOutOfBounds
// (Net, NetReliable, Native, Event, Public, NetServer)

void ACrabC::ServerOnOutOfBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "ServerOnOutOfBounds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabC.ServerSpawnCosmeticProjectile
// (Net, Native, Event, Public, NetServer)
// Parameters:
// struct FCrabProjectileInfo              ProjectileInfo                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileOwner                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              StartLoc                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExplodeInstantly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabC::ServerSpawnCosmeticProjectile(const struct FCrabProjectileInfo& ProjectileInfo, class AActor* ProjectileOwner, const struct FVector_NetQuantize& StartLoc, bool bExplodeInstantly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabC", "ServerSpawnCosmeticProjectile");

	Params::CrabC_ServerSpawnCosmeticProjectile Parms{};

	Parms.ProjectileInfo = std::move(ProjectileInfo);
	Parms.ProjectileOwner = ProjectileOwner;
	Parms.StartLoc = std::move(StartLoc);
	Parms.bExplodeInstantly = bExplodeInstantly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.MulticastShowHealthBar
// (Net, Native, Event, NetMulticast, Protected)

void ACrabEnemyC::MulticastShowHealthBar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "MulticastShowHealthBar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.MulticastSpawnHomingThornProjectiles
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ACrabEnemyC::MulticastSpawnHomingThornProjectiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "MulticastSpawnHomingThornProjectiles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.MulticastSpawnMirroredProjectile
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// class ACrabC*                           DamagingC                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabEnemyC::MulticastSpawnMirroredProjectile(class ACrabC* DamagingC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "MulticastSpawnMirroredProjectile");

	Params::CrabEnemyC_MulticastSpawnMirroredProjectile Parms{};

	Parms.DamagingC = DamagingC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.MulticastSpawnShrapnelProjectiles
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ACrabEnemyC::MulticastSpawnShrapnelProjectiles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "MulticastSpawnShrapnelProjectiles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.OnRep_CurrentActionIndex
// (Final, Native, Protected)

void ACrabEnemyC::OnRep_CurrentActionIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "OnRep_CurrentActionIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.OnRep_EnemyBuff
// (Final, Native, Protected)

void ACrabEnemyC::OnRep_EnemyBuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "OnRep_EnemyBuff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyC.OnRep_IsShielded
// (Final, Native, Protected)

void ACrabEnemyC::OnRep_IsShielded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyC", "OnRep_IsShielded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTargetDummyC.OnRep_DPS
// (Final, Native, Protected)

void ACrabTargetDummyC::OnRep_DPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTargetDummyC", "OnRep_DPS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyAIC.OnReceiveMoveCompleted
// (Final, Native, Protected)
// Parameters:
// struct FAIRequestID                     RequestID                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPathFollowingResult                    Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabEnemyAIC::OnReceiveMoveCompleted(const struct FAIRequestID& RequestID, EPathFollowingResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyAIC", "OnReceiveMoveCompleted");

	Params::CrabEnemyAIC_OnReceiveMoveCompleted Parms{};

	Parms.RequestID = std::move(RequestID);
	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDamageArea.OnRep_Radius
// (Final, Native, Protected)

void ACrabDamageArea::OnRep_Radius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDamageArea", "OnRep_Radius");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ClientDashBlockedDamage
// (Net, Native, Event, Protected, NetClient)

void ACrabPlayerC::ClientDashBlockedDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ClientDashBlockedDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ClientOnTriggeredRingOfDestruction
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPlayerC::ClientOnTriggeredRingOfDestruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ClientOnTriggeredRingOfDestruction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ClientPostPortal
// (Net, NetReliable, Native, Event, Protected, NetClient)

void ACrabPlayerC::ClientPostPortal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ClientPostPortal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ClientPrePortal
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// class ACrabPortal*                      Portal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ClientPrePortal(class ACrabPortal* Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ClientPrePortal");

	Params::CrabPlayerC_ClientPrePortal Parms{};

	Parms.Portal = Portal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ClientTeleport
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FVector_NetQuantize              Loc                                                    (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ClientTeleport(const struct FVector_NetQuantize& Loc, float Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ClientTeleport");

	Params::CrabPlayerC_ClientTeleport Parms{};

	Parms.Loc = std::move(Loc);
	Parms.Yaw = Yaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastDash
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// ECrabInputDir                           DashDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::MulticastDash(ECrabInputDir DashDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastDash");

	Params::CrabPlayerC_MulticastDash Parms{};

	Parms.DashDir = DashDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastFlip
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// ECrabInputDir                           FlipDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::MulticastFlip(ECrabInputDir FlipDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastFlip");

	Params::CrabPlayerC_MulticastFlip Parms{};

	Parms.FlipDir = FlipDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastHideStalePing
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ACrabPlayerC::MulticastHideStalePing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastHideStalePing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastInteract
// (Net, Native, Event, NetMulticast, Protected)

void ACrabPlayerC::MulticastInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastMelee
// (Net, Native, Event, NetMulticast, Protected)

void ACrabPlayerC::MulticastMelee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastMelee");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.MulticastThrowGrenade
// (Net, Native, Event, NetMulticast, Protected)

void ACrabPlayerC::MulticastThrowGrenade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "MulticastThrowGrenade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_AbilityDA
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_AbilityDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_AbilityDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_CrabSkin
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_CrabSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_CrabSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_CurrentTriggeredPerk
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_CurrentTriggeredPerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_CurrentTriggeredPerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_IsAiming
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_IsAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_IsAiming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_IsBananaActive
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_IsBananaActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_IsBananaActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_IsSliding
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_IsSliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_IsSliding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_MeleeDA
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_MeleeDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_MeleeDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_PingLoc
// (Final, Native, Protected)
// Parameters:
// struct FVector_NetQuantize              PreviousPingLoc                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::OnRep_PingLoc(const struct FVector_NetQuantize& PreviousPingLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_PingLoc");

	Params::CrabPlayerC_OnRep_PingLoc Parms{};

	Parms.PreviousPingLoc = std::move(PreviousPingLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.OnRep_SlideDamageIteration
// (Final, Native, Protected)

void ACrabPlayerC::OnRep_SlideDamageIteration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "OnRep_SlideDamageIteration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerAutoLoot
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerAutoLoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerAutoLoot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerDash
// (Net, Native, Event, Protected, NetServer)
// Parameters:
// ECrabInputDir                           DashDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerDash(ECrabInputDir DashDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerDash");

	Params::CrabPlayerC_ServerDash Parms{};

	Parms.DashDir = DashDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerDealFallDamage
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerDealFallDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerDealFallDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerDropPickup
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UCrabPickupDA*                    PickupDA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCrabInventoryInfo               InventoryInfo                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerDropPickup(class UCrabPickupDA* PickupDA, const struct FCrabInventoryInfo& InventoryInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerDropPickup");

	Params::CrabPlayerC_ServerDropPickup Parms{};

	Parms.PickupDA = PickupDA;
	Parms.InventoryInfo = std::move(InventoryInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerFlip
// (Net, Native, Event, Protected, NetServer)
// Parameters:
// ECrabInputDir                           FlipDir                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerFlip(ECrabInputDir FlipDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerFlip");

	Params::CrabPlayerC_ServerFlip Parms{};

	Parms.FlipDir = FlipDir;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerInteract
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class ACrabInteractable*                ActorToInteractWith                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerInteract(class ACrabInteractable* ActorToInteractWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerInteract");

	Params::CrabPlayerC_ServerInteract Parms{};

	Parms.ActorToInteractWith = ActorToInteractWith;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerMelee
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerMelee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerMelee");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerPing
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FVector_NetQuantize              InPingLoc                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerPing(const struct FVector_NetQuantize& InPingLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerPing");

	Params::CrabPlayerC_ServerPing Parms{};

	Parms.InPingLoc = std::move(InPingLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerSalvage
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class ACrabInteractPickup*              PickupToSalvage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPlayerC::ServerSalvage(class ACrabInteractPickup* PickupToSalvage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerSalvage");

	Params::CrabPlayerC_ServerSalvage Parms{};

	Parms.PickupToSalvage = PickupToSalvage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerStartAim
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerStartAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerStartAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerStartSlide
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerStartSlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerStartSlide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerStopAim
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerStopAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerStopAim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerStopSlide
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerStopSlide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerStopSlide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerC.ServerThrowGrenade
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPlayerC::ServerThrowGrenade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerC", "ServerThrowGrenade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDestructible.MulticastAddLeak
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FVector_NetQuantize              DamageLoc                                              (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabDestructible::MulticastAddLeak(const struct FVector_NetQuantize& DamageLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDestructible", "MulticastAddLeak");

	Params::CrabDestructible_MulticastAddLeak Parms{};

	Parms.DamageLoc = std::move(DamageLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDestructible.MulticastExplode
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class ACrabC*                           ExplodingC                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabDestructible::MulticastExplode(class ACrabC* ExplodingC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDestructible", "MulticastExplode");

	Params::CrabDestructible_MulticastExplode Parms{};

	Parms.ExplodingC = ExplodingC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDestructible.OnRep_IsProximityExplosionTriggered
// (Final, Native, Protected)

void ACrabDestructible::OnRep_IsProximityExplosionTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDestructible", "OnRep_IsProximityExplosionTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDestructible.OnRep_ScaleMultiplier
// (Final, Native, Protected)

void ACrabDestructible::OnRep_ScaleMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDestructible", "OnRep_ScaleMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabHarvestArea.MulticastOnCountdownDecremented
// (Net, Native, Event, NetMulticast, Protected)

void ACrabHarvestArea::MulticastOnCountdownDecremented()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabHarvestArea", "MulticastOnCountdownDecremented");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabHarvestArea.MulticastOnHarvestAreaCleared
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ACrabHarvestArea::MulticastOnHarvestAreaCleared()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabHarvestArea", "MulticastOnHarvestAreaCleared");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInteractPickup.OnRep_IsPickupDeactivated
// (Final, Native, Protected)

void ACrabInteractPickup::OnRep_IsPickupDeactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInteractPickup", "OnRep_IsPickupDeactivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInteractPickup.OnRep_NumTimesPickedUp
// (Final, Native, Protected)

void ACrabInteractPickup::OnRep_NumTimesPickedUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInteractPickup", "OnRep_NumTimesPickedUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInteractPickup.OnRep_PickupInfo
// (Final, Native, Protected)

void ACrabInteractPickup::OnRep_PickupInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInteractPickup", "OnRep_PickupInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPortal.OnRep_PortalInfo
// (Final, Native, Protected)

void ACrabPortal::OnRep_PortalInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPortal", "OnRep_PortalInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabChest.OnRep_IsChestOpened
// (Final, Native, Protected)

void ACrabChest::OnRep_IsChestOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabChest", "OnRep_IsChestOpened");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabChest.OnRep_OwningPS
// (Final, Native, Protected)

void ACrabChest::OnRep_OwningPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabChest", "OnRep_OwningPS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTotem.OnRep_Cost
// (Final, Native, Protected)

void ACrabTotem::OnRep_Cost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTotem", "OnRep_Cost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTotem.OnRep_IsExploded
// (Final, Native, Protected)

void ACrabTotem::OnRep_IsExploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTotem", "OnRep_IsExploded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTotem.OnRep_NumBuffs
// (Final, Native, Protected)

void ACrabTotem::OnRep_NumBuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTotem", "OnRep_NumBuffs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabTotem.OnRep_NumDebuffs
// (Final, Native, Protected)

void ACrabTotem::OnRep_NumDebuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabTotem", "OnRep_NumDebuffs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabOverlapPickup.OnRep_PickedUpByC
// (Final, Native, Protected)

void ACrabOverlapPickup::OnRep_PickedUpByC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabOverlapPickup", "OnRep_PickedUpByC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabCrystalPickup.OnRep_CrystalsMultiplier
// (Final, Native, Protected)

void ACrabCrystalPickup::OnRep_CrystalsMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabCrystalPickup", "OnRep_CrystalsMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabHealthPickup.OnRep_HealthToGive
// (Final, Native, Protected)

void ACrabHealthPickup::OnRep_HealthToGive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabHealthPickup", "OnRep_HealthToGive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPhysicsActor.OnRep_IsExploded
// (Final, Native, Protected)

void ACrabPhysicsActor::OnRep_IsExploded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPhysicsActor", "OnRep_IsExploded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabShopPedestal.MulticastHidePedestalWC
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ACrabShopPedestal::MulticastHidePedestalWC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabShopPedestal", "MulticastHidePedestalWC");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabShopPedestal.MulticastInitPedestalInfo
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FCrabPedestalInfo                NewPedestalInfo                                        (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ACrabShopPedestal::MulticastInitPedestalInfo(const struct FCrabPedestalInfo& NewPedestalInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabShopPedestal", "MulticastInitPedestalInfo");

	Params::CrabShopPedestal_MulticastInitPedestalInfo Parms{};

	Parms.NewPedestalInfo = std::move(NewPedestalInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabSpectatorC.ClientInitSpectatorC
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ACrabPlayerC*                     EliminatedPlayerToSpectate                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabSpectatorC::ClientInitSpectatorC(class ACrabPlayerC* EliminatedPlayerToSpectate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabSpectatorC", "ClientInitSpectatorC");

	Params::CrabSpectatorC_ClientInitSpectatorC Parms{};

	Parms.EliminatedPlayerToSpectate = EliminatedPlayerToSpectate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabStatsPedestal.OnRep_LobbyStats
// (Final, Native, Protected)

void ACrabStatsPedestal::OnRep_LobbyStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabStatsPedestal", "OnRep_LobbyStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredFeedbackButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredFeedbackButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredFeedbackButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredQuickRestartButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredQuickRestartButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredQuickRestartButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredQuitToDesktopButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredQuitToDesktopButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredQuitToDesktopButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredQuitToLobbyButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredQuitToLobbyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredQuitToLobbyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredResumeButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredResumeButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredResumeButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnHoveredSettingsButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnHoveredSettingsButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnHoveredSettingsButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedFeedbackButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedFeedbackButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedFeedbackButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedQuickRestartButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedQuickRestartButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedQuickRestartButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedQuitToDesktopButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedQuitToDesktopButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedQuitToDesktopButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedQuitToLobbyButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedQuitToLobbyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedQuitToLobbyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedResumeButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedResumeButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedResumeButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInGameMenuUI.OnPressedSettingsButton
// (Final, Native, Protected)

void UCrabInGameMenuUI::OnPressedSettingsButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInGameMenuUI", "OnPressedSettingsButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabSettingsMenuUI.OnPressedControlsButton
// (Final, Native, Protected)

void UCrabSettingsMenuUI::OnPressedControlsButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabSettingsMenuUI", "OnPressedControlsButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabSettingsMenuUI.OnPressedSoundButton
// (Final, Native, Protected)

void UCrabSettingsMenuUI::OnPressedSoundButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabSettingsMenuUI", "OnPressedSoundButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabSettingsMenuUI.OnPressedVideoButton
// (Final, Native, Protected)

void UCrabSettingsMenuUI::OnPressedVideoButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabSettingsMenuUI", "OnPressedVideoButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabKeyBindRowUI.OnHoveredControllerButton
// (Final, Native, Protected)

void UCrabKeyBindRowUI::OnHoveredControllerButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabKeyBindRowUI", "OnHoveredControllerButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabKeyBindRowUI.OnHoveredKeyboardButton
// (Final, Native, Protected)

void UCrabKeyBindRowUI::OnHoveredKeyboardButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabKeyBindRowUI", "OnHoveredKeyboardButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabKeyBindRowUI.OnPressedControllerKeySelector
// (Final, Native, Protected)
// Parameters:
// struct FInputChord                      SelectedKey                                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabKeyBindRowUI::OnPressedControllerKeySelector(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabKeyBindRowUI", "OnPressedControllerKeySelector");

	Params::CrabKeyBindRowUI_OnPressedControllerKeySelector Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabKeyBindRowUI.OnPressedKeyboardKeySelector
// (Final, Native, Protected)
// Parameters:
// struct FInputChord                      SelectedKey                                            (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabKeyBindRowUI::OnPressedKeyboardKeySelector(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabKeyBindRowUI", "OnPressedKeyboardKeySelector");

	Params::CrabKeyBindRowUI_OnPressedKeyboardKeySelector Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGameStateUI.OnChatTextCommitted
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethod                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabGameStateUI::OnChatTextCommitted(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGameStateUI", "OnChatTextCommitted");

	Params::CrabGameStateUI_OnChatTextCommitted Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabSliderUI.OnMainSliderValueChanged
// (Final, Native, Protected)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabSliderUI::OnMainSliderValueChanged(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabSliderUI", "OnMainSliderValueChanged");

	Params::CrabSliderUI_OnMainSliderValueChanged Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.OnRep_IsReloading
// (Final, Native, Protected)

void ACrabWeapon::OnRep_IsReloading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "OnRep_IsReloading");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.OnRep_OwningPS
// (Final, Native, Protected)

void ACrabWeapon::OnRep_OwningPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "OnRep_OwningPS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.OnRep_TimesFired
// (Final, Native, Protected)

void ACrabWeapon::OnRep_TimesFired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "OnRep_TimesFired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.OnRep_WeaponInfo
// (Final, Native, Protected)

void ACrabWeapon::OnRep_WeaponInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "OnRep_WeaponInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.ServerPlayStartFireFX
// (Net, Native, Event, Protected, NetServer)

void ACrabWeapon::ServerPlayStartFireFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "ServerPlayStartFireFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.ServerSetIsReloading
// (Net, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bNewIsReloading                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabWeapon::ServerSetIsReloading(bool bNewIsReloading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "ServerSetIsReloading");

	Params::CrabWeapon_ServerSetIsReloading Parms{};

	Parms.bNewIsReloading = bNewIsReloading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabWeapon.ServerTriggerOnReloadPerks
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabWeapon::ServerTriggerOnReloadPerks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabWeapon", "ServerTriggerOnReloadPerks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetAntiAliasingType
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetAntiAliasingType(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetAntiAliasingType");

	Params::CrabVideoMenuUI_SetAntiAliasingType Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetCameraShake
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetCameraShake(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetCameraShake");

	Params::CrabVideoMenuUI_SetCameraShake Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetDamageNumbers
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetDamageNumbers(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetDamageNumbers");

	Params::CrabVideoMenuUI_SetDamageNumbers Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetDisplayMode
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetDisplayMode(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetDisplayMode");

	Params::CrabVideoMenuUI_SetDisplayMode Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetFieldOfView
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetFieldOfView(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetFieldOfView");

	Params::CrabVideoMenuUI_SetFieldOfView Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetFPSLimit
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetFPSLimit(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetFPSLimit");

	Params::CrabVideoMenuUI_SetFPSLimit Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetGraphicsQuality
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetGraphicsQuality(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetGraphicsQuality");

	Params::CrabVideoMenuUI_SetGraphicsQuality Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetHitmarkers
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetHitmarkers(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetHitmarkers");

	Params::CrabVideoMenuUI_SetHitmarkers Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetMotionBlur
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetMotionBlur(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetMotionBlur");

	Params::CrabVideoMenuUI_SetMotionBlur Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetPauseWhenLosingFocus
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetPauseWhenLosingFocus(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetPauseWhenLosingFocus");

	Params::CrabVideoMenuUI_SetPauseWhenLosingFocus Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetResolution
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetResolution(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetResolution");

	Params::CrabVideoMenuUI_SetResolution Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetResolutionQuality
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetResolutionQuality(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetResolutionQuality");

	Params::CrabVideoMenuUI_SetResolutionQuality Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetSharpening
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetSharpening(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetSharpening");

	Params::CrabVideoMenuUI_SetSharpening Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetShowFPS
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetShowFPS(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetShowFPS");

	Params::CrabVideoMenuUI_SetShowFPS Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetTextChatVisibility
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetTextChatVisibility(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetTextChatVisibility");

	Params::CrabVideoMenuUI_SetTextChatVisibility Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetVSync
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetVSync(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetVSync");

	Params::CrabVideoMenuUI_SetVSync Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabVideoMenuUI.SetWeaponEffects
// (Final, Native, Protected)
// Parameters:
// class FString                           NewSelection                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrabVideoMenuUI::SetWeaponEffects(const class FString& NewSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabVideoMenuUI", "SetWeaponEffects");

	Params::CrabVideoMenuUI_SetWeaponEffects Parms{};

	Parms.NewSelection = std::move(NewSelection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabEnemyAnimInstance.AnimNotify_Action
// (Final, Native, Public)

void UCrabEnemyAnimInstance::AnimNotify_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabEnemyAnimInstance", "AnimNotify_Action");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPlayerAnimInstance.AnimNotify_Melee
// (Final, Native, Public)

void UCrabPlayerAnimInstance::AnimNotify_Melee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPlayerAnimInstance", "AnimNotify_Melee");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGI.OnStreamLevelLoaded
// (Final, Native, Protected)

void UCrabGI::OnStreamLevelLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGI", "OnStreamLevelLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGI.OnStreamLevelUnloaded
// (Final, Native, Protected)

void UCrabGI::OnStreamLevelUnloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGI", "OnStreamLevelUnloaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.DebugCompleteIsland
// (Final, Exec, Native, Public)

void ACrabGM::DebugCompleteIsland()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "DebugCompleteIsland");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.DebugEndRun
// (Final, Exec, Native, Public)

void ACrabGM::DebugEndRun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "DebugEndRun");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.DebugGoToIsland
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   IslandToGoTo                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabGM::DebugGoToIsland(int32 IslandToGoTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "DebugGoToIsland");

	Params::CrabGM_DebugGoToIsland Parms{};

	Parms.IslandToGoTo = IslandToGoTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.DebugGoToNextBiome
// (Final, Exec, Native, Public)

void ACrabGM::DebugGoToNextBiome()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "DebugGoToNextBiome");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.DebugGoToNextIsland
// (Final, Exec, Native, Public)

void ACrabGM::DebugGoToNextIsland()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "DebugGoToNextIsland");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGM.OnNavigationGenerationFinished
// (Final, Native, Protected)
// Parameters:
// class ANavigationData*                  NavData                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabGM::OnNavigationGenerationFinished(class ANavigationData* NavData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGM", "OnNavigationGenerationFinished");

	Params::CrabGM_OnNavigationGenerationFinished Parms{};

	Parms.NavData = NavData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_Blessing
// (Final, Native, Protected)

void ACrabGS::OnRep_Blessing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_Blessing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_ChallengeModifiers
// (Final, Native, Protected)

void ACrabGS::OnRep_ChallengeModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_ChallengeModifiers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_CurrentCountdown
// (Final, Native, Protected)

void ACrabGS::OnRep_CurrentCountdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_CurrentCountdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_CurrentIslandTimeRemaining
// (Final, Native, Protected)

void ACrabGS::OnRep_CurrentIslandTimeRemaining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_CurrentIslandTimeRemaining");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_CurrentIslandType
// (Final, Native, Protected)

void ACrabGS::OnRep_CurrentIslandType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_CurrentIslandType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_CurrentTime
// (Final, Native, Protected)

void ACrabGS::OnRep_CurrentTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_CurrentTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_Difficulty
// (Final, Native, Protected)

void ACrabGS::OnRep_Difficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_Difficulty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_DifficultyModifiers
// (Final, Native, Protected)

void ACrabGS::OnRep_DifficultyModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_DifficultyModifiers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_MatchState
// (Final, Native, Protected)

void ACrabGS::OnRep_MatchState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_MatchState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_MinigameScore
// (Final, Native, Protected)

void ACrabGS::OnRep_MinigameScore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_MinigameScore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabGS.OnRep_RewardLootPool
// (Final, Native, Protected)

void ACrabGS::OnRep_RewardLootPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabGS", "OnRep_RewardLootPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabHC.OnRep_HealthInfo
// (Final, Native, Protected)

void UCrabHC::OnRep_HealthInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabHC", "OnRep_HealthInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabLM.MulticastPlayOneShotFX
// (Net, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// class UNiagaraSystem*                   FXToPlay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundCue*                        SoundToPlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLoc                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabLM::MulticastPlayOneShotFX(class UNiagaraSystem* FXToPlay, class USoundCue* SoundToPlay, const struct FVector& SpawnLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabLM", "MulticastPlayOneShotFX");

	Params::CrabLM_MulticastPlayOneShotFX Parms{};

	Parms.FXToPlay = FXToPlay;
	Parms.SoundToPlay = SoundToPlay;
	Parms.SpawnLoc = std::move(SpawnLoc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabLM.MulticastSpawnCosmeticProjectile
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FCrabProjectileInfo              ProjectileInfo                                         (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileOwner                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              StartLoc                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExplodeInstantly                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabLM::MulticastSpawnCosmeticProjectile(const struct FCrabProjectileInfo& ProjectileInfo, class AActor* ProjectileOwner, const struct FVector_NetQuantize& StartLoc, bool bExplodeInstantly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabLM", "MulticastSpawnCosmeticProjectile");

	Params::CrabLM_MulticastSpawnCosmeticProjectile Parms{};

	Parms.ProjectileInfo = std::move(ProjectileInfo);
	Parms.ProjectileOwner = ProjectileOwner;
	Parms.StartLoc = std::move(StartLoc);
	Parms.bExplodeInstantly = bExplodeInstantly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabLM.OnRep_LightingPresetIndex
// (Final, Native, Protected)

void ACrabLM::OnRep_LightingPresetIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabLM", "OnRep_LightingPresetIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientClearAutoSave
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientClearAutoSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientClearAutoSave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientInventoryEvent
// (Net, Native, Event, Public, NetClient)
// Parameters:
// class FString                           InventoryEventMessage                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientInventoryEvent(const class FString& InventoryEventMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientInventoryEvent");

	Params::CrabPC_ClientInventoryEvent Parms{};

	Parms.InventoryEventMessage = std::move(InventoryEventMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientLeaveGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientLeaveGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientLeaveGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientNotifyDamageDealt
// (Net, Native, Event, Public, NetClient)
// Parameters:
// struct FCrabDamageInfo                  DamageInfo                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// ECrabDamageHitType                      DamageHitType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientNotifyDamageDealt(const struct FCrabDamageInfo& DamageInfo, ECrabDamageHitType DamageHitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientNotifyDamageDealt");

	Params::CrabPC_ClientNotifyDamageDealt Parms{};

	Parms.DamageInfo = std::move(DamageInfo);
	Parms.DamageHitType = DamageHitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnClearedIsland
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bWasFlawlessClear                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnClearedIsland(bool bWasFlawlessClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnClearedIsland");

	Params::CrabPC_ClientOnClearedIsland Parms{};

	Parms.bWasFlawlessClear = bWasFlawlessClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnEliminated
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           EliminatedByPlayerName                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnEliminated(const class FString& EliminatedByPlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnEliminated");

	Params::CrabPC_ClientOnEliminated Parms{};

	Parms.EliminatedByPlayerName = std::move(EliminatedByPlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnEnteredPortal
// (Net, NetReliable, Native, Event, Protected, NetClient)
// Parameters:
// struct FCrabNextIslandInfo              NextIslandInfo                                         (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnEnteredPortal(const struct FCrabNextIslandInfo& NextIslandInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnEnteredPortal");

	Params::CrabPC_ClientOnEnteredPortal Parms{};

	Parms.NextIslandInfo = std::move(NextIslandInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnInteractedWithKeyTotem
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ACrabTotem*                       KeyTotem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnInteractedWithKeyTotem(class ACrabTotem* KeyTotem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnInteractedWithKeyTotem");

	Params::CrabPC_ClientOnInteractedWithKeyTotem Parms{};

	Parms.KeyTotem = KeyTotem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnPickedUpPickup
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class UCrabPickupDA*                    PickupDA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnPickedUpPickup(class UCrabPickupDA* PickupDA, uint8 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnPickedUpPickup");

	Params::CrabPC_ClientOnPickedUpPickup Parms{};

	Parms.PickupDA = PickupDA;
	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnReceivedChatMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnReceivedChatMessage(const class FString& PlayerName, const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnReceivedChatMessage");

	Params::CrabPC_ClientOnReceivedChatMessage Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientOnTookDamage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// ECrabDamageHitType                      DamageHitType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientOnTookDamage(ECrabDamageHitType DamageHitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientOnTookDamage");

	Params::CrabPC_ClientOnTookDamage Parms{};

	Parms.DamageHitType = DamageHitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientPlayerLeftGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientPlayerLeftGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientPlayerLeftGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientRefreshPSUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientRefreshPSUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientRefreshPSUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientSetIsCharacterInputEnabled
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bNewIsCharacterInputEnabled                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ClientSetIsCharacterInputEnabled(bool bNewIsCharacterInputEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientSetIsCharacterInputEnabled");

	Params::CrabPC_ClientSetIsCharacterInputEnabled Parms{};

	Parms.bNewIsCharacterInputEnabled = bNewIsCharacterInputEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientShowCosmeticsMenuUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientShowCosmeticsMenuUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientShowCosmeticsMenuUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientShowLoadingScreenUI
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientShowLoadingScreenUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientShowLoadingScreenUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientStartSlomoRamp
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientStartSlomoRamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientStartSlomoRamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ClientUploadLobbyStats
// (Net, NetReliable, Native, Event, Public, NetClient)

void ACrabPC::ClientUploadLobbyStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ClientUploadLobbyStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.OnSlomoRampTimelineUpdated
// (Final, Native, Protected)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::OnSlomoRampTimelineUpdated(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "OnSlomoRampTimelineUpdated");

	Params::CrabPC_OnSlomoRampTimelineUpdated Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ServerRestoreAutoSave
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FCrabAutoSave                    AutoSave                                               (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ACrabPC::ServerRestoreAutoSave(const struct FCrabAutoSave& AutoSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ServerRestoreAutoSave");

	Params::CrabPC_ServerRestoreAutoSave Parms{};

	Parms.AutoSave = std::move(AutoSave);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ServerSendChatMessage
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class FString                           ChatMessage                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ServerSendChatMessage(const class FString& ChatMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ServerSendChatMessage");

	Params::CrabPC_ServerSendChatMessage Parms{};

	Parms.ChatMessage = std::move(ChatMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ServerSpawnKeyTotemPickup
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class ACrabTotem*                       KeyTotem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCrabPickupDA*                    PickupToSpawn                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPC::ServerSpawnKeyTotemPickup(class ACrabTotem* KeyTotem, class UCrabPickupDA* PickupToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ServerSpawnKeyTotemPickup");

	Params::CrabPC_ServerSpawnKeyTotemPickup Parms{};

	Parms.KeyTotem = KeyTotem;
	Parms.PickupToSpawn = PickupToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ServerSpectateNextPlayer
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ACrabPC::ServerSpectateNextPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ServerSpectateNextPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPC.ServerUploadLobbyStats
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// struct FCrabLobbyStats                  LobbyStats                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ACrabPC::ServerUploadLobbyStats(const struct FCrabLobbyStats& LobbyStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPC", "ServerUploadLobbyStats");

	Params::CrabPC_ServerUploadLobbyStats Parms{};

	Parms.LobbyStats = std::move(LobbyStats);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_AbilityDA
// (Final, Native, Protected)

void ACrabPS::OnRep_AbilityDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_AbilityDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_AccountLevel
// (Final, Native, Protected)

void ACrabPS::OnRep_AccountLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_AccountLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_AccountRank
// (Final, Native, Protected)

void ACrabPS::OnRep_AccountRank()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_AccountRank");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Combo
// (Final, Native, Protected)

void ACrabPS::OnRep_Combo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Combo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Crystals
// (Final, Native, Protected)

void ACrabPS::OnRep_Crystals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Crystals");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Eliminations
// (Final, Native, Protected)

void ACrabPS::OnRep_Eliminations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Eliminations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Inventory
// (Final, Native, Protected)

void ACrabPS::OnRep_Inventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Inventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_IslandRewardRarity
// (Final, Native, Protected)

void ACrabPS::OnRep_IslandRewardRarity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_IslandRewardRarity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Keys
// (Final, Native, Protected)

void ACrabPS::OnRep_Keys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Keys");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_MeleeDA
// (Final, Native, Protected)

void ACrabPS::OnRep_MeleeDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_MeleeDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_Points
// (Final, Native, Protected)

void ACrabPS::OnRep_Points()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_Points");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_ScaleMultiplier
// (Final, Native, Protected)

void ACrabPS::OnRep_ScaleMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_ScaleMultiplier");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.OnRep_WeaponDA
// (Final, Native, Protected)

void ACrabPS::OnRep_WeaponDA()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "OnRep_WeaponDA");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerEquipCosmetics
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class UMaterialInterface*               NewCrabSkin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerEquipCosmetics(class UMaterialInterface* NewCrabSkin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerEquipCosmetics");

	Params::CrabPS_ServerEquipCosmetics Parms{};

	Parms.NewCrabSkin = NewCrabSkin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerEquipInventory
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// class UCrabWeaponDA*                    NewWeaponDA                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCrabAbilityDA*                   NewAbilityDA                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCrabMeleeDA*                     NewMeleeDA                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerEquipInventory(class UCrabWeaponDA* NewWeaponDA, class UCrabAbilityDA* NewAbilityDA, class UCrabMeleeDA* NewMeleeDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerEquipInventory");

	Params::CrabPS_ServerEquipInventory Parms{};

	Parms.NewWeaponDA = NewWeaponDA;
	Parms.NewAbilityDA = NewAbilityDA;
	Parms.NewMeleeDA = NewMeleeDA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerIncrementNumInventorySlots
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ECrabPickupType                         PickupType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Cost                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerIncrementNumInventorySlots(ECrabPickupType PickupType, int32 Cost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerIncrementNumInventorySlots");

	Params::CrabPS_ServerIncrementNumInventorySlots Parms{};

	Parms.PickupType = PickupType;
	Parms.Cost = Cost;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerRefreshAccount
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// ECrabRank                               NewAccountRank                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewAccountLevel                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewKeys                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerRefreshAccount(ECrabRank NewAccountRank, int32 NewAccountLevel, int32 NewKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerRefreshAccount");

	Params::CrabPS_ServerRefreshAccount Parms{};

	Parms.NewAccountRank = NewAccountRank;
	Parms.NewAccountLevel = NewAccountLevel;
	Parms.NewKeys = NewKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerRemoveGrenadeMod
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ECrabGrenadeModType                     GrenadeModType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerRemoveGrenadeMod(ECrabGrenadeModType GrenadeModType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerRemoveGrenadeMod");

	Params::CrabPS_ServerRemoveGrenadeMod Parms{};

	Parms.GrenadeModType = GrenadeModType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerRemovePerk
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ECrabPerkType                           PerkType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerRemovePerk(ECrabPerkType PerkType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerRemovePerk");

	Params::CrabPS_ServerRemovePerk Parms{};

	Parms.PerkType = PerkType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerRemoveRelic
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ECrabRelicType                          RelicType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerRemoveRelic(ECrabRelicType RelicType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerRemoveRelic");

	Params::CrabPS_ServerRemoveRelic Parms{};

	Parms.RelicType = RelicType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerRemoveWeaponMod
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// ECrabWeaponModType                      WeaponModType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerRemoveWeaponMod(ECrabWeaponModType WeaponModType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerRemoveWeaponMod");

	Params::CrabPS_ServerRemoveWeaponMod Parms{};

	Parms.WeaponModType = WeaponModType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerSetAbilityDA
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UCrabAbilityDA*                   NewAbilityDA                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerSetAbilityDA(class UCrabAbilityDA* NewAbilityDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerSetAbilityDA");

	Params::CrabPS_ServerSetAbilityDA Parms{};

	Parms.NewAbilityDA = NewAbilityDA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerSetMeleeDA
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UCrabMeleeDA*                     NewMeleeDA                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerSetMeleeDA(class UCrabMeleeDA* NewMeleeDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerSetMeleeDA");

	Params::CrabPS_ServerSetMeleeDA Parms{};

	Parms.NewMeleeDA = NewMeleeDA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabPS.ServerSetWeaponDA
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// class UCrabWeaponDA*                    NewWeaponDA                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACrabPS::ServerSetWeaponDA(class UCrabWeaponDA* NewWeaponDA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabPS", "ServerSetWeaponDA");

	Params::CrabPS_ServerSetWeaponDA Parms{};

	Parms.NewWeaponDA = NewWeaponDA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabArrowSelectionUI.OnHoveredNextButton
// (Final, Native, Protected)

void UCrabArrowSelectionUI::OnHoveredNextButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabArrowSelectionUI", "OnHoveredNextButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabArrowSelectionUI.OnHoveredPreviousButton
// (Final, Native, Protected)

void UCrabArrowSelectionUI::OnHoveredPreviousButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabArrowSelectionUI", "OnHoveredPreviousButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabArrowSelectionUI.OnPressedNextButton
// (Final, Native, Protected)

void UCrabArrowSelectionUI::OnPressedNextButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabArrowSelectionUI", "OnPressedNextButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabArrowSelectionUI.OnPressedPreviousButton
// (Final, Native, Protected)

void UCrabArrowSelectionUI::OnPressedPreviousButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabArrowSelectionUI", "OnPressedPreviousButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabCosmeticsMenuUI.OnPressedCrabSkinsButton
// (Final, Native, Protected)

void UCrabCosmeticsMenuUI::OnPressedCrabSkinsButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabCosmeticsMenuUI", "OnPressedCrabSkinsButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabCosmeticsMenuUI.OnPressedWeaponSkinsButton
// (Final, Native, Protected)

void UCrabCosmeticsMenuUI::OnPressedWeaponSkinsButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabCosmeticsMenuUI", "OnPressedWeaponSkinsButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnHoveredEasyButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnHoveredEasyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnHoveredEasyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnHoveredNightmareButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnHoveredNightmareButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnHoveredNightmareButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnHoveredNormalButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnHoveredNormalButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnHoveredNormalButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnHoveredUltraChaosButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnHoveredUltraChaosButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnHoveredUltraChaosButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnPressedEasyButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnPressedEasyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnPressedEasyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnPressedNightmareButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnPressedNightmareButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnPressedNightmareButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnPressedNormalButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnPressedNormalButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnPressedNormalButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabDifficultyMenuUI.OnPressedUltraChaosButton
// (Final, Native, Protected)

void UCrabDifficultyMenuUI::OnPressedUltraChaosButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabDifficultyMenuUI", "OnPressedUltraChaosButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabMultiplayerMenuUI.OnHoveredQuickplayButton
// (Final, Native, Protected)

void UCrabMultiplayerMenuUI::OnHoveredQuickplayButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabMultiplayerMenuUI", "OnHoveredQuickplayButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabMultiplayerMenuUI.OnPressedQuickplayButton
// (Final, Native, Protected)

void UCrabMultiplayerMenuUI::OnPressedQuickplayButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabMultiplayerMenuUI", "OnPressedQuickplayButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInventorySlotUI.OnHoveredSlotButton
// (Final, Native, Protected)

void UCrabInventorySlotUI::OnHoveredSlotButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInventorySlotUI", "OnHoveredSlotButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInviteFriendRowUI.OnHoveredInviteButton
// (Final, Native, Protected)

void UCrabInviteFriendRowUI::OnHoveredInviteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInviteFriendRowUI", "OnHoveredInviteButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function CrabChampions.CrabInviteFriendRowUI.OnPressedInviteButton
// (Final, Native, Protected)

void UCrabInviteFriendRowUI::OnPressedInviteButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CrabInviteFriendRowUI", "OnPressedInviteButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

