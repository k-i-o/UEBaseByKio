#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CrabChampions

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "CrabChampions_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function CrabChampions.CrabC.ClientKnockback
// 0x0010 (0x0010 - 0x0000)
struct CrabC_ClientKnockback final
{
public:
	struct FVector_NetQuantizeNormal              Dir;                                               // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabC_ClientKnockback) == 0x000004, "Wrong alignment on CrabC_ClientKnockback");
static_assert(sizeof(CrabC_ClientKnockback) == 0x000010, "Wrong size on CrabC_ClientKnockback");
static_assert(offsetof(CrabC_ClientKnockback, Dir) == 0x000000, "Member 'CrabC_ClientKnockback::Dir' has a wrong offset!");
static_assert(offsetof(CrabC_ClientKnockback, Strength) == 0x00000C, "Member 'CrabC_ClientKnockback::Strength' has a wrong offset!");

// Function CrabChampions.CrabC.OnRep_DebuffState
// 0x0020 (0x0020 - 0x0000)
struct CrabC_OnRep_DebuffState final
{
public:
	struct FCrabDebuffState                       PreviousDebuffState;                               // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabC_OnRep_DebuffState) == 0x000004, "Wrong alignment on CrabC_OnRep_DebuffState");
static_assert(sizeof(CrabC_OnRep_DebuffState) == 0x000020, "Wrong size on CrabC_OnRep_DebuffState");
static_assert(offsetof(CrabC_OnRep_DebuffState, PreviousDebuffState) == 0x000000, "Member 'CrabC_OnRep_DebuffState::PreviousDebuffState' has a wrong offset!");

// Function CrabChampions.CrabC.ServerClientAuthoritativeMove
// 0x0050 (0x0050 - 0x0000)
struct CrabC_ServerClientAuthoritativeMove final
{
public:
	struct FClientAuthoritativeMoveData           MoveData;                                          // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabC_ServerClientAuthoritativeMove) == 0x000008, "Wrong alignment on CrabC_ServerClientAuthoritativeMove");
static_assert(sizeof(CrabC_ServerClientAuthoritativeMove) == 0x000050, "Wrong size on CrabC_ServerClientAuthoritativeMove");
static_assert(offsetof(CrabC_ServerClientAuthoritativeMove, MoveData) == 0x000000, "Member 'CrabC_ServerClientAuthoritativeMove::MoveData' has a wrong offset!");

// Function CrabChampions.CrabC.ServerDealDamage
// 0x0010 (0x0010 - 0x0000)
struct CrabC_ServerDealDamage final
{
public:
	TArray<struct FCrabDamageInfo>                DamageInfoArray;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabC_ServerDealDamage) == 0x000008, "Wrong alignment on CrabC_ServerDealDamage");
static_assert(sizeof(CrabC_ServerDealDamage) == 0x000010, "Wrong size on CrabC_ServerDealDamage");
static_assert(offsetof(CrabC_ServerDealDamage, DamageInfoArray) == 0x000000, "Member 'CrabC_ServerDealDamage::DamageInfoArray' has a wrong offset!");

// Function CrabChampions.CrabC.ServerSpawnCosmeticProjectile
// 0x0048 (0x0048 - 0x0000)
struct CrabC_ServerSpawnCosmeticProjectile final
{
public:
	struct FCrabProjectileInfo                    ProjectileInfo;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ProjectileOwner;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    StartLoc;                                          // 0x0038(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeInstantly;                                 // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1413[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabC_ServerSpawnCosmeticProjectile) == 0x000008, "Wrong alignment on CrabC_ServerSpawnCosmeticProjectile");
static_assert(sizeof(CrabC_ServerSpawnCosmeticProjectile) == 0x000048, "Wrong size on CrabC_ServerSpawnCosmeticProjectile");
static_assert(offsetof(CrabC_ServerSpawnCosmeticProjectile, ProjectileInfo) == 0x000000, "Member 'CrabC_ServerSpawnCosmeticProjectile::ProjectileInfo' has a wrong offset!");
static_assert(offsetof(CrabC_ServerSpawnCosmeticProjectile, ProjectileOwner) == 0x000030, "Member 'CrabC_ServerSpawnCosmeticProjectile::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(CrabC_ServerSpawnCosmeticProjectile, StartLoc) == 0x000038, "Member 'CrabC_ServerSpawnCosmeticProjectile::StartLoc' has a wrong offset!");
static_assert(offsetof(CrabC_ServerSpawnCosmeticProjectile, bExplodeInstantly) == 0x000044, "Member 'CrabC_ServerSpawnCosmeticProjectile::bExplodeInstantly' has a wrong offset!");

// Function CrabChampions.CrabEnemyC.MulticastSpawnMirroredProjectile
// 0x0008 (0x0008 - 0x0000)
struct CrabEnemyC_MulticastSpawnMirroredProjectile final
{
public:
	class ACrabC*                                 DamagingC;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabEnemyC_MulticastSpawnMirroredProjectile) == 0x000008, "Wrong alignment on CrabEnemyC_MulticastSpawnMirroredProjectile");
static_assert(sizeof(CrabEnemyC_MulticastSpawnMirroredProjectile) == 0x000008, "Wrong size on CrabEnemyC_MulticastSpawnMirroredProjectile");
static_assert(offsetof(CrabEnemyC_MulticastSpawnMirroredProjectile, DamagingC) == 0x000000, "Member 'CrabEnemyC_MulticastSpawnMirroredProjectile::DamagingC' has a wrong offset!");

// Function CrabChampions.CrabEnemyAIC.OnReceiveMoveCompleted
// 0x0008 (0x0008 - 0x0000)
struct CrabEnemyAIC_OnReceiveMoveCompleted final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1431[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabEnemyAIC_OnReceiveMoveCompleted) == 0x000004, "Wrong alignment on CrabEnemyAIC_OnReceiveMoveCompleted");
static_assert(sizeof(CrabEnemyAIC_OnReceiveMoveCompleted) == 0x000008, "Wrong size on CrabEnemyAIC_OnReceiveMoveCompleted");
static_assert(offsetof(CrabEnemyAIC_OnReceiveMoveCompleted, RequestID) == 0x000000, "Member 'CrabEnemyAIC_OnReceiveMoveCompleted::RequestID' has a wrong offset!");
static_assert(offsetof(CrabEnemyAIC_OnReceiveMoveCompleted, Result) == 0x000004, "Member 'CrabEnemyAIC_OnReceiveMoveCompleted::Result' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ClientPrePortal
// 0x0008 (0x0008 - 0x0000)
struct CrabPlayerC_ClientPrePortal final
{
public:
	class ACrabPortal*                            Portal;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ClientPrePortal) == 0x000008, "Wrong alignment on CrabPlayerC_ClientPrePortal");
static_assert(sizeof(CrabPlayerC_ClientPrePortal) == 0x000008, "Wrong size on CrabPlayerC_ClientPrePortal");
static_assert(offsetof(CrabPlayerC_ClientPrePortal, Portal) == 0x000000, "Member 'CrabPlayerC_ClientPrePortal::Portal' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ClientTeleport
// 0x0010 (0x0010 - 0x0000)
struct CrabPlayerC_ClientTeleport final
{
public:
	struct FVector_NetQuantize                    Loc;                                               // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ClientTeleport) == 0x000004, "Wrong alignment on CrabPlayerC_ClientTeleport");
static_assert(sizeof(CrabPlayerC_ClientTeleport) == 0x000010, "Wrong size on CrabPlayerC_ClientTeleport");
static_assert(offsetof(CrabPlayerC_ClientTeleport, Loc) == 0x000000, "Member 'CrabPlayerC_ClientTeleport::Loc' has a wrong offset!");
static_assert(offsetof(CrabPlayerC_ClientTeleport, Yaw) == 0x00000C, "Member 'CrabPlayerC_ClientTeleport::Yaw' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.MulticastDash
// 0x0001 (0x0001 - 0x0000)
struct CrabPlayerC_MulticastDash final
{
public:
	ECrabInputDir                                 DashDir;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_MulticastDash) == 0x000001, "Wrong alignment on CrabPlayerC_MulticastDash");
static_assert(sizeof(CrabPlayerC_MulticastDash) == 0x000001, "Wrong size on CrabPlayerC_MulticastDash");
static_assert(offsetof(CrabPlayerC_MulticastDash, DashDir) == 0x000000, "Member 'CrabPlayerC_MulticastDash::DashDir' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.MulticastFlip
// 0x0001 (0x0001 - 0x0000)
struct CrabPlayerC_MulticastFlip final
{
public:
	ECrabInputDir                                 FlipDir;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_MulticastFlip) == 0x000001, "Wrong alignment on CrabPlayerC_MulticastFlip");
static_assert(sizeof(CrabPlayerC_MulticastFlip) == 0x000001, "Wrong size on CrabPlayerC_MulticastFlip");
static_assert(offsetof(CrabPlayerC_MulticastFlip, FlipDir) == 0x000000, "Member 'CrabPlayerC_MulticastFlip::FlipDir' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.OnRep_PingLoc
// 0x000C (0x000C - 0x0000)
struct CrabPlayerC_OnRep_PingLoc final
{
public:
	struct FVector_NetQuantize                    PreviousPingLoc;                                   // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_OnRep_PingLoc) == 0x000004, "Wrong alignment on CrabPlayerC_OnRep_PingLoc");
static_assert(sizeof(CrabPlayerC_OnRep_PingLoc) == 0x00000C, "Wrong size on CrabPlayerC_OnRep_PingLoc");
static_assert(offsetof(CrabPlayerC_OnRep_PingLoc, PreviousPingLoc) == 0x000000, "Member 'CrabPlayerC_OnRep_PingLoc::PreviousPingLoc' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerDash
// 0x0001 (0x0001 - 0x0000)
struct CrabPlayerC_ServerDash final
{
public:
	ECrabInputDir                                 DashDir;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerDash) == 0x000001, "Wrong alignment on CrabPlayerC_ServerDash");
static_assert(sizeof(CrabPlayerC_ServerDash) == 0x000001, "Wrong size on CrabPlayerC_ServerDash");
static_assert(offsetof(CrabPlayerC_ServerDash, DashDir) == 0x000000, "Member 'CrabPlayerC_ServerDash::DashDir' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerDropPickup
// 0x0028 (0x0028 - 0x0000)
struct CrabPlayerC_ServerDropPickup final
{
public:
	class UCrabPickupDA*                          PickupDA;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCrabInventoryInfo                     InventoryInfo;                                     // 0x0008(0x0020)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerDropPickup) == 0x000008, "Wrong alignment on CrabPlayerC_ServerDropPickup");
static_assert(sizeof(CrabPlayerC_ServerDropPickup) == 0x000028, "Wrong size on CrabPlayerC_ServerDropPickup");
static_assert(offsetof(CrabPlayerC_ServerDropPickup, PickupDA) == 0x000000, "Member 'CrabPlayerC_ServerDropPickup::PickupDA' has a wrong offset!");
static_assert(offsetof(CrabPlayerC_ServerDropPickup, InventoryInfo) == 0x000008, "Member 'CrabPlayerC_ServerDropPickup::InventoryInfo' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerFlip
// 0x0001 (0x0001 - 0x0000)
struct CrabPlayerC_ServerFlip final
{
public:
	ECrabInputDir                                 FlipDir;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerFlip) == 0x000001, "Wrong alignment on CrabPlayerC_ServerFlip");
static_assert(sizeof(CrabPlayerC_ServerFlip) == 0x000001, "Wrong size on CrabPlayerC_ServerFlip");
static_assert(offsetof(CrabPlayerC_ServerFlip, FlipDir) == 0x000000, "Member 'CrabPlayerC_ServerFlip::FlipDir' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerInteract
// 0x0008 (0x0008 - 0x0000)
struct CrabPlayerC_ServerInteract final
{
public:
	class ACrabInteractable*                      ActorToInteractWith;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerInteract) == 0x000008, "Wrong alignment on CrabPlayerC_ServerInteract");
static_assert(sizeof(CrabPlayerC_ServerInteract) == 0x000008, "Wrong size on CrabPlayerC_ServerInteract");
static_assert(offsetof(CrabPlayerC_ServerInteract, ActorToInteractWith) == 0x000000, "Member 'CrabPlayerC_ServerInteract::ActorToInteractWith' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerPing
// 0x000C (0x000C - 0x0000)
struct CrabPlayerC_ServerPing final
{
public:
	struct FVector_NetQuantize                    InPingLoc;                                         // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerPing) == 0x000004, "Wrong alignment on CrabPlayerC_ServerPing");
static_assert(sizeof(CrabPlayerC_ServerPing) == 0x00000C, "Wrong size on CrabPlayerC_ServerPing");
static_assert(offsetof(CrabPlayerC_ServerPing, InPingLoc) == 0x000000, "Member 'CrabPlayerC_ServerPing::InPingLoc' has a wrong offset!");

// Function CrabChampions.CrabPlayerC.ServerSalvage
// 0x0008 (0x0008 - 0x0000)
struct CrabPlayerC_ServerSalvage final
{
public:
	class ACrabInteractPickup*                    PickupToSalvage;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPlayerC_ServerSalvage) == 0x000008, "Wrong alignment on CrabPlayerC_ServerSalvage");
static_assert(sizeof(CrabPlayerC_ServerSalvage) == 0x000008, "Wrong size on CrabPlayerC_ServerSalvage");
static_assert(offsetof(CrabPlayerC_ServerSalvage, PickupToSalvage) == 0x000000, "Member 'CrabPlayerC_ServerSalvage::PickupToSalvage' has a wrong offset!");

// Function CrabChampions.CrabDestructible.MulticastAddLeak
// 0x000C (0x000C - 0x0000)
struct CrabDestructible_MulticastAddLeak final
{
public:
	struct FVector_NetQuantize                    DamageLoc;                                         // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabDestructible_MulticastAddLeak) == 0x000004, "Wrong alignment on CrabDestructible_MulticastAddLeak");
static_assert(sizeof(CrabDestructible_MulticastAddLeak) == 0x00000C, "Wrong size on CrabDestructible_MulticastAddLeak");
static_assert(offsetof(CrabDestructible_MulticastAddLeak, DamageLoc) == 0x000000, "Member 'CrabDestructible_MulticastAddLeak::DamageLoc' has a wrong offset!");

// Function CrabChampions.CrabDestructible.MulticastExplode
// 0x0008 (0x0008 - 0x0000)
struct CrabDestructible_MulticastExplode final
{
public:
	class ACrabC*                                 ExplodingC;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabDestructible_MulticastExplode) == 0x000008, "Wrong alignment on CrabDestructible_MulticastExplode");
static_assert(sizeof(CrabDestructible_MulticastExplode) == 0x000008, "Wrong size on CrabDestructible_MulticastExplode");
static_assert(offsetof(CrabDestructible_MulticastExplode, ExplodingC) == 0x000000, "Member 'CrabDestructible_MulticastExplode::ExplodingC' has a wrong offset!");

// Function CrabChampions.CrabShopPedestal.MulticastInitPedestalInfo
// 0x000C (0x000C - 0x0000)
struct CrabShopPedestal_MulticastInitPedestalInfo final
{
public:
	struct FCrabPedestalInfo                      NewPedestalInfo;                                   // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabShopPedestal_MulticastInitPedestalInfo) == 0x000004, "Wrong alignment on CrabShopPedestal_MulticastInitPedestalInfo");
static_assert(sizeof(CrabShopPedestal_MulticastInitPedestalInfo) == 0x00000C, "Wrong size on CrabShopPedestal_MulticastInitPedestalInfo");
static_assert(offsetof(CrabShopPedestal_MulticastInitPedestalInfo, NewPedestalInfo) == 0x000000, "Member 'CrabShopPedestal_MulticastInitPedestalInfo::NewPedestalInfo' has a wrong offset!");

// Function CrabChampions.CrabSpectatorC.ClientInitSpectatorC
// 0x0008 (0x0008 - 0x0000)
struct CrabSpectatorC_ClientInitSpectatorC final
{
public:
	class ACrabPlayerC*                           EliminatedPlayerToSpectate;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabSpectatorC_ClientInitSpectatorC) == 0x000008, "Wrong alignment on CrabSpectatorC_ClientInitSpectatorC");
static_assert(sizeof(CrabSpectatorC_ClientInitSpectatorC) == 0x000008, "Wrong size on CrabSpectatorC_ClientInitSpectatorC");
static_assert(offsetof(CrabSpectatorC_ClientInitSpectatorC, EliminatedPlayerToSpectate) == 0x000000, "Member 'CrabSpectatorC_ClientInitSpectatorC::EliminatedPlayerToSpectate' has a wrong offset!");

// Function CrabChampions.CrabKeyBindRowUI.OnPressedControllerKeySelector
// 0x0020 (0x0020 - 0x0000)
struct CrabKeyBindRowUI_OnPressedControllerKeySelector final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabKeyBindRowUI_OnPressedControllerKeySelector) == 0x000008, "Wrong alignment on CrabKeyBindRowUI_OnPressedControllerKeySelector");
static_assert(sizeof(CrabKeyBindRowUI_OnPressedControllerKeySelector) == 0x000020, "Wrong size on CrabKeyBindRowUI_OnPressedControllerKeySelector");
static_assert(offsetof(CrabKeyBindRowUI_OnPressedControllerKeySelector, SelectedKey) == 0x000000, "Member 'CrabKeyBindRowUI_OnPressedControllerKeySelector::SelectedKey' has a wrong offset!");

// Function CrabChampions.CrabKeyBindRowUI.OnPressedKeyboardKeySelector
// 0x0020 (0x0020 - 0x0000)
struct CrabKeyBindRowUI_OnPressedKeyboardKeySelector final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabKeyBindRowUI_OnPressedKeyboardKeySelector) == 0x000008, "Wrong alignment on CrabKeyBindRowUI_OnPressedKeyboardKeySelector");
static_assert(sizeof(CrabKeyBindRowUI_OnPressedKeyboardKeySelector) == 0x000020, "Wrong size on CrabKeyBindRowUI_OnPressedKeyboardKeySelector");
static_assert(offsetof(CrabKeyBindRowUI_OnPressedKeyboardKeySelector, SelectedKey) == 0x000000, "Member 'CrabKeyBindRowUI_OnPressedKeyboardKeySelector::SelectedKey' has a wrong offset!");

// Function CrabChampions.CrabGameStateUI.OnChatTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct CrabGameStateUI_OnChatTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabGameStateUI_OnChatTextCommitted) == 0x000008, "Wrong alignment on CrabGameStateUI_OnChatTextCommitted");
static_assert(sizeof(CrabGameStateUI_OnChatTextCommitted) == 0x000020, "Wrong size on CrabGameStateUI_OnChatTextCommitted");
static_assert(offsetof(CrabGameStateUI_OnChatTextCommitted, Text) == 0x000000, "Member 'CrabGameStateUI_OnChatTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(CrabGameStateUI_OnChatTextCommitted, CommitMethod) == 0x000018, "Member 'CrabGameStateUI_OnChatTextCommitted::CommitMethod' has a wrong offset!");

// Function CrabChampions.CrabSliderUI.OnMainSliderValueChanged
// 0x0004 (0x0004 - 0x0000)
struct CrabSliderUI_OnMainSliderValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabSliderUI_OnMainSliderValueChanged) == 0x000004, "Wrong alignment on CrabSliderUI_OnMainSliderValueChanged");
static_assert(sizeof(CrabSliderUI_OnMainSliderValueChanged) == 0x000004, "Wrong size on CrabSliderUI_OnMainSliderValueChanged");
static_assert(offsetof(CrabSliderUI_OnMainSliderValueChanged, Value) == 0x000000, "Member 'CrabSliderUI_OnMainSliderValueChanged::Value' has a wrong offset!");

// Function CrabChampions.CrabWeapon.ServerSetIsReloading
// 0x0001 (0x0001 - 0x0000)
struct CrabWeapon_ServerSetIsReloading final
{
public:
	bool                                          bNewIsReloading;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabWeapon_ServerSetIsReloading) == 0x000001, "Wrong alignment on CrabWeapon_ServerSetIsReloading");
static_assert(sizeof(CrabWeapon_ServerSetIsReloading) == 0x000001, "Wrong size on CrabWeapon_ServerSetIsReloading");
static_assert(offsetof(CrabWeapon_ServerSetIsReloading, bNewIsReloading) == 0x000000, "Member 'CrabWeapon_ServerSetIsReloading::bNewIsReloading' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetAntiAliasingType
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetAntiAliasingType final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetAntiAliasingType) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetAntiAliasingType");
static_assert(sizeof(CrabVideoMenuUI_SetAntiAliasingType) == 0x000010, "Wrong size on CrabVideoMenuUI_SetAntiAliasingType");
static_assert(offsetof(CrabVideoMenuUI_SetAntiAliasingType, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetAntiAliasingType::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetCameraShake
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetCameraShake final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetCameraShake) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetCameraShake");
static_assert(sizeof(CrabVideoMenuUI_SetCameraShake) == 0x000010, "Wrong size on CrabVideoMenuUI_SetCameraShake");
static_assert(offsetof(CrabVideoMenuUI_SetCameraShake, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetCameraShake::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetDamageNumbers
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetDamageNumbers final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetDamageNumbers) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetDamageNumbers");
static_assert(sizeof(CrabVideoMenuUI_SetDamageNumbers) == 0x000010, "Wrong size on CrabVideoMenuUI_SetDamageNumbers");
static_assert(offsetof(CrabVideoMenuUI_SetDamageNumbers, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetDamageNumbers::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetDisplayMode
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetDisplayMode final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetDisplayMode) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetDisplayMode");
static_assert(sizeof(CrabVideoMenuUI_SetDisplayMode) == 0x000010, "Wrong size on CrabVideoMenuUI_SetDisplayMode");
static_assert(offsetof(CrabVideoMenuUI_SetDisplayMode, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetDisplayMode::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetFieldOfView
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetFieldOfView final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetFieldOfView) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetFieldOfView");
static_assert(sizeof(CrabVideoMenuUI_SetFieldOfView) == 0x000010, "Wrong size on CrabVideoMenuUI_SetFieldOfView");
static_assert(offsetof(CrabVideoMenuUI_SetFieldOfView, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetFieldOfView::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetFPSLimit
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetFPSLimit final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetFPSLimit) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetFPSLimit");
static_assert(sizeof(CrabVideoMenuUI_SetFPSLimit) == 0x000010, "Wrong size on CrabVideoMenuUI_SetFPSLimit");
static_assert(offsetof(CrabVideoMenuUI_SetFPSLimit, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetFPSLimit::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetGraphicsQuality
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetGraphicsQuality final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetGraphicsQuality) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetGraphicsQuality");
static_assert(sizeof(CrabVideoMenuUI_SetGraphicsQuality) == 0x000010, "Wrong size on CrabVideoMenuUI_SetGraphicsQuality");
static_assert(offsetof(CrabVideoMenuUI_SetGraphicsQuality, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetGraphicsQuality::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetHitmarkers
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetHitmarkers final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetHitmarkers) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetHitmarkers");
static_assert(sizeof(CrabVideoMenuUI_SetHitmarkers) == 0x000010, "Wrong size on CrabVideoMenuUI_SetHitmarkers");
static_assert(offsetof(CrabVideoMenuUI_SetHitmarkers, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetHitmarkers::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetMotionBlur
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetMotionBlur final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetMotionBlur) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetMotionBlur");
static_assert(sizeof(CrabVideoMenuUI_SetMotionBlur) == 0x000010, "Wrong size on CrabVideoMenuUI_SetMotionBlur");
static_assert(offsetof(CrabVideoMenuUI_SetMotionBlur, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetMotionBlur::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetPauseWhenLosingFocus
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetPauseWhenLosingFocus final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetPauseWhenLosingFocus) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetPauseWhenLosingFocus");
static_assert(sizeof(CrabVideoMenuUI_SetPauseWhenLosingFocus) == 0x000010, "Wrong size on CrabVideoMenuUI_SetPauseWhenLosingFocus");
static_assert(offsetof(CrabVideoMenuUI_SetPauseWhenLosingFocus, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetPauseWhenLosingFocus::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetResolution
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetResolution final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetResolution) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetResolution");
static_assert(sizeof(CrabVideoMenuUI_SetResolution) == 0x000010, "Wrong size on CrabVideoMenuUI_SetResolution");
static_assert(offsetof(CrabVideoMenuUI_SetResolution, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetResolution::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetResolutionQuality
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetResolutionQuality final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetResolutionQuality) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetResolutionQuality");
static_assert(sizeof(CrabVideoMenuUI_SetResolutionQuality) == 0x000010, "Wrong size on CrabVideoMenuUI_SetResolutionQuality");
static_assert(offsetof(CrabVideoMenuUI_SetResolutionQuality, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetResolutionQuality::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetSharpening
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetSharpening final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetSharpening) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetSharpening");
static_assert(sizeof(CrabVideoMenuUI_SetSharpening) == 0x000010, "Wrong size on CrabVideoMenuUI_SetSharpening");
static_assert(offsetof(CrabVideoMenuUI_SetSharpening, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetSharpening::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetShowFPS
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetShowFPS final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetShowFPS) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetShowFPS");
static_assert(sizeof(CrabVideoMenuUI_SetShowFPS) == 0x000010, "Wrong size on CrabVideoMenuUI_SetShowFPS");
static_assert(offsetof(CrabVideoMenuUI_SetShowFPS, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetShowFPS::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetTextChatVisibility
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetTextChatVisibility final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetTextChatVisibility) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetTextChatVisibility");
static_assert(sizeof(CrabVideoMenuUI_SetTextChatVisibility) == 0x000010, "Wrong size on CrabVideoMenuUI_SetTextChatVisibility");
static_assert(offsetof(CrabVideoMenuUI_SetTextChatVisibility, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetTextChatVisibility::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetVSync
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetVSync final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetVSync) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetVSync");
static_assert(sizeof(CrabVideoMenuUI_SetVSync) == 0x000010, "Wrong size on CrabVideoMenuUI_SetVSync");
static_assert(offsetof(CrabVideoMenuUI_SetVSync, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetVSync::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabVideoMenuUI.SetWeaponEffects
// 0x0010 (0x0010 - 0x0000)
struct CrabVideoMenuUI_SetWeaponEffects final
{
public:
	class FString                                 NewSelection;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabVideoMenuUI_SetWeaponEffects) == 0x000008, "Wrong alignment on CrabVideoMenuUI_SetWeaponEffects");
static_assert(sizeof(CrabVideoMenuUI_SetWeaponEffects) == 0x000010, "Wrong size on CrabVideoMenuUI_SetWeaponEffects");
static_assert(offsetof(CrabVideoMenuUI_SetWeaponEffects, NewSelection) == 0x000000, "Member 'CrabVideoMenuUI_SetWeaponEffects::NewSelection' has a wrong offset!");

// Function CrabChampions.CrabGM.DebugGoToIsland
// 0x0004 (0x0004 - 0x0000)
struct CrabGM_DebugGoToIsland final
{
public:
	int32                                         IslandToGoTo;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabGM_DebugGoToIsland) == 0x000004, "Wrong alignment on CrabGM_DebugGoToIsland");
static_assert(sizeof(CrabGM_DebugGoToIsland) == 0x000004, "Wrong size on CrabGM_DebugGoToIsland");
static_assert(offsetof(CrabGM_DebugGoToIsland, IslandToGoTo) == 0x000000, "Member 'CrabGM_DebugGoToIsland::IslandToGoTo' has a wrong offset!");

// Function CrabChampions.CrabGM.OnNavigationGenerationFinished
// 0x0008 (0x0008 - 0x0000)
struct CrabGM_OnNavigationGenerationFinished final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabGM_OnNavigationGenerationFinished) == 0x000008, "Wrong alignment on CrabGM_OnNavigationGenerationFinished");
static_assert(sizeof(CrabGM_OnNavigationGenerationFinished) == 0x000008, "Wrong size on CrabGM_OnNavigationGenerationFinished");
static_assert(offsetof(CrabGM_OnNavigationGenerationFinished, NavData) == 0x000000, "Member 'CrabGM_OnNavigationGenerationFinished::NavData' has a wrong offset!");

// Function CrabChampions.CrabLM.MulticastPlayOneShotFX
// 0x0020 (0x0020 - 0x0000)
struct CrabLM_MulticastPlayOneShotFX final
{
public:
	class UNiagaraSystem*                         FXToPlay;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              SoundToPlay;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLoc;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabLM_MulticastPlayOneShotFX) == 0x000008, "Wrong alignment on CrabLM_MulticastPlayOneShotFX");
static_assert(sizeof(CrabLM_MulticastPlayOneShotFX) == 0x000020, "Wrong size on CrabLM_MulticastPlayOneShotFX");
static_assert(offsetof(CrabLM_MulticastPlayOneShotFX, FXToPlay) == 0x000000, "Member 'CrabLM_MulticastPlayOneShotFX::FXToPlay' has a wrong offset!");
static_assert(offsetof(CrabLM_MulticastPlayOneShotFX, SoundToPlay) == 0x000008, "Member 'CrabLM_MulticastPlayOneShotFX::SoundToPlay' has a wrong offset!");
static_assert(offsetof(CrabLM_MulticastPlayOneShotFX, SpawnLoc) == 0x000010, "Member 'CrabLM_MulticastPlayOneShotFX::SpawnLoc' has a wrong offset!");

// Function CrabChampions.CrabLM.MulticastSpawnCosmeticProjectile
// 0x0048 (0x0048 - 0x0000)
struct CrabLM_MulticastSpawnCosmeticProjectile final
{
public:
	struct FCrabProjectileInfo                    ProjectileInfo;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ProjectileOwner;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    StartLoc;                                          // 0x0038(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeInstantly;                                 // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E2[0x3];                                     // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabLM_MulticastSpawnCosmeticProjectile) == 0x000008, "Wrong alignment on CrabLM_MulticastSpawnCosmeticProjectile");
static_assert(sizeof(CrabLM_MulticastSpawnCosmeticProjectile) == 0x000048, "Wrong size on CrabLM_MulticastSpawnCosmeticProjectile");
static_assert(offsetof(CrabLM_MulticastSpawnCosmeticProjectile, ProjectileInfo) == 0x000000, "Member 'CrabLM_MulticastSpawnCosmeticProjectile::ProjectileInfo' has a wrong offset!");
static_assert(offsetof(CrabLM_MulticastSpawnCosmeticProjectile, ProjectileOwner) == 0x000030, "Member 'CrabLM_MulticastSpawnCosmeticProjectile::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(CrabLM_MulticastSpawnCosmeticProjectile, StartLoc) == 0x000038, "Member 'CrabLM_MulticastSpawnCosmeticProjectile::StartLoc' has a wrong offset!");
static_assert(offsetof(CrabLM_MulticastSpawnCosmeticProjectile, bExplodeInstantly) == 0x000044, "Member 'CrabLM_MulticastSpawnCosmeticProjectile::bExplodeInstantly' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientInventoryEvent
// 0x0010 (0x0010 - 0x0000)
struct CrabPC_ClientInventoryEvent final
{
public:
	class FString                                 InventoryEventMessage;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientInventoryEvent) == 0x000008, "Wrong alignment on CrabPC_ClientInventoryEvent");
static_assert(sizeof(CrabPC_ClientInventoryEvent) == 0x000010, "Wrong size on CrabPC_ClientInventoryEvent");
static_assert(offsetof(CrabPC_ClientInventoryEvent, InventoryEventMessage) == 0x000000, "Member 'CrabPC_ClientInventoryEvent::InventoryEventMessage' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientNotifyDamageDealt
// 0x0040 (0x0040 - 0x0000)
struct CrabPC_ClientNotifyDamageDealt final
{
public:
	struct FCrabDamageInfo                        DamageInfo;                                        // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	ECrabDamageHitType                            DamageHitType;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E5[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabPC_ClientNotifyDamageDealt) == 0x000008, "Wrong alignment on CrabPC_ClientNotifyDamageDealt");
static_assert(sizeof(CrabPC_ClientNotifyDamageDealt) == 0x000040, "Wrong size on CrabPC_ClientNotifyDamageDealt");
static_assert(offsetof(CrabPC_ClientNotifyDamageDealt, DamageInfo) == 0x000000, "Member 'CrabPC_ClientNotifyDamageDealt::DamageInfo' has a wrong offset!");
static_assert(offsetof(CrabPC_ClientNotifyDamageDealt, DamageHitType) == 0x000038, "Member 'CrabPC_ClientNotifyDamageDealt::DamageHitType' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnClearedIsland
// 0x0001 (0x0001 - 0x0000)
struct CrabPC_ClientOnClearedIsland final
{
public:
	bool                                          bWasFlawlessClear;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnClearedIsland) == 0x000001, "Wrong alignment on CrabPC_ClientOnClearedIsland");
static_assert(sizeof(CrabPC_ClientOnClearedIsland) == 0x000001, "Wrong size on CrabPC_ClientOnClearedIsland");
static_assert(offsetof(CrabPC_ClientOnClearedIsland, bWasFlawlessClear) == 0x000000, "Member 'CrabPC_ClientOnClearedIsland::bWasFlawlessClear' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnEliminated
// 0x0010 (0x0010 - 0x0000)
struct CrabPC_ClientOnEliminated final
{
public:
	class FString                                 EliminatedByPlayerName;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnEliminated) == 0x000008, "Wrong alignment on CrabPC_ClientOnEliminated");
static_assert(sizeof(CrabPC_ClientOnEliminated) == 0x000010, "Wrong size on CrabPC_ClientOnEliminated");
static_assert(offsetof(CrabPC_ClientOnEliminated, EliminatedByPlayerName) == 0x000000, "Member 'CrabPC_ClientOnEliminated::EliminatedByPlayerName' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnEnteredPortal
// 0x0030 (0x0030 - 0x0000)
struct CrabPC_ClientOnEnteredPortal final
{
public:
	struct FCrabNextIslandInfo                    NextIslandInfo;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnEnteredPortal) == 0x000008, "Wrong alignment on CrabPC_ClientOnEnteredPortal");
static_assert(sizeof(CrabPC_ClientOnEnteredPortal) == 0x000030, "Wrong size on CrabPC_ClientOnEnteredPortal");
static_assert(offsetof(CrabPC_ClientOnEnteredPortal, NextIslandInfo) == 0x000000, "Member 'CrabPC_ClientOnEnteredPortal::NextIslandInfo' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnInteractedWithKeyTotem
// 0x0008 (0x0008 - 0x0000)
struct CrabPC_ClientOnInteractedWithKeyTotem final
{
public:
	class ACrabTotem*                             KeyTotem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnInteractedWithKeyTotem) == 0x000008, "Wrong alignment on CrabPC_ClientOnInteractedWithKeyTotem");
static_assert(sizeof(CrabPC_ClientOnInteractedWithKeyTotem) == 0x000008, "Wrong size on CrabPC_ClientOnInteractedWithKeyTotem");
static_assert(offsetof(CrabPC_ClientOnInteractedWithKeyTotem, KeyTotem) == 0x000000, "Member 'CrabPC_ClientOnInteractedWithKeyTotem::KeyTotem' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnPickedUpPickup
// 0x0010 (0x0010 - 0x0000)
struct CrabPC_ClientOnPickedUpPickup final
{
public:
	class UCrabPickupDA*                          PickupDA;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Level;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14E6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CrabPC_ClientOnPickedUpPickup) == 0x000008, "Wrong alignment on CrabPC_ClientOnPickedUpPickup");
static_assert(sizeof(CrabPC_ClientOnPickedUpPickup) == 0x000010, "Wrong size on CrabPC_ClientOnPickedUpPickup");
static_assert(offsetof(CrabPC_ClientOnPickedUpPickup, PickupDA) == 0x000000, "Member 'CrabPC_ClientOnPickedUpPickup::PickupDA' has a wrong offset!");
static_assert(offsetof(CrabPC_ClientOnPickedUpPickup, Level) == 0x000008, "Member 'CrabPC_ClientOnPickedUpPickup::Level' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnReceivedChatMessage
// 0x0020 (0x0020 - 0x0000)
struct CrabPC_ClientOnReceivedChatMessage final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatMessage;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnReceivedChatMessage) == 0x000008, "Wrong alignment on CrabPC_ClientOnReceivedChatMessage");
static_assert(sizeof(CrabPC_ClientOnReceivedChatMessage) == 0x000020, "Wrong size on CrabPC_ClientOnReceivedChatMessage");
static_assert(offsetof(CrabPC_ClientOnReceivedChatMessage, PlayerName) == 0x000000, "Member 'CrabPC_ClientOnReceivedChatMessage::PlayerName' has a wrong offset!");
static_assert(offsetof(CrabPC_ClientOnReceivedChatMessage, ChatMessage) == 0x000010, "Member 'CrabPC_ClientOnReceivedChatMessage::ChatMessage' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientOnTookDamage
// 0x0001 (0x0001 - 0x0000)
struct CrabPC_ClientOnTookDamage final
{
public:
	ECrabDamageHitType                            DamageHitType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientOnTookDamage) == 0x000001, "Wrong alignment on CrabPC_ClientOnTookDamage");
static_assert(sizeof(CrabPC_ClientOnTookDamage) == 0x000001, "Wrong size on CrabPC_ClientOnTookDamage");
static_assert(offsetof(CrabPC_ClientOnTookDamage, DamageHitType) == 0x000000, "Member 'CrabPC_ClientOnTookDamage::DamageHitType' has a wrong offset!");

// Function CrabChampions.CrabPC.ClientSetIsCharacterInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct CrabPC_ClientSetIsCharacterInputEnabled final
{
public:
	bool                                          bNewIsCharacterInputEnabled;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ClientSetIsCharacterInputEnabled) == 0x000001, "Wrong alignment on CrabPC_ClientSetIsCharacterInputEnabled");
static_assert(sizeof(CrabPC_ClientSetIsCharacterInputEnabled) == 0x000001, "Wrong size on CrabPC_ClientSetIsCharacterInputEnabled");
static_assert(offsetof(CrabPC_ClientSetIsCharacterInputEnabled, bNewIsCharacterInputEnabled) == 0x000000, "Member 'CrabPC_ClientSetIsCharacterInputEnabled::bNewIsCharacterInputEnabled' has a wrong offset!");

// Function CrabChampions.CrabPC.OnSlomoRampTimelineUpdated
// 0x0004 (0x0004 - 0x0000)
struct CrabPC_OnSlomoRampTimelineUpdated final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_OnSlomoRampTimelineUpdated) == 0x000004, "Wrong alignment on CrabPC_OnSlomoRampTimelineUpdated");
static_assert(sizeof(CrabPC_OnSlomoRampTimelineUpdated) == 0x000004, "Wrong size on CrabPC_OnSlomoRampTimelineUpdated");
static_assert(offsetof(CrabPC_OnSlomoRampTimelineUpdated, Value) == 0x000000, "Member 'CrabPC_OnSlomoRampTimelineUpdated::Value' has a wrong offset!");

// Function CrabChampions.CrabPC.ServerRestoreAutoSave
// 0x0130 (0x0130 - 0x0000)
struct CrabPC_ServerRestoreAutoSave final
{
public:
	struct FCrabAutoSave                          AutoSave;                                          // 0x0000(0x0130)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ServerRestoreAutoSave) == 0x000008, "Wrong alignment on CrabPC_ServerRestoreAutoSave");
static_assert(sizeof(CrabPC_ServerRestoreAutoSave) == 0x000130, "Wrong size on CrabPC_ServerRestoreAutoSave");
static_assert(offsetof(CrabPC_ServerRestoreAutoSave, AutoSave) == 0x000000, "Member 'CrabPC_ServerRestoreAutoSave::AutoSave' has a wrong offset!");

// Function CrabChampions.CrabPC.ServerSendChatMessage
// 0x0010 (0x0010 - 0x0000)
struct CrabPC_ServerSendChatMessage final
{
public:
	class FString                                 ChatMessage;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ServerSendChatMessage) == 0x000008, "Wrong alignment on CrabPC_ServerSendChatMessage");
static_assert(sizeof(CrabPC_ServerSendChatMessage) == 0x000010, "Wrong size on CrabPC_ServerSendChatMessage");
static_assert(offsetof(CrabPC_ServerSendChatMessage, ChatMessage) == 0x000000, "Member 'CrabPC_ServerSendChatMessage::ChatMessage' has a wrong offset!");

// Function CrabChampions.CrabPC.ServerSpawnKeyTotemPickup
// 0x0010 (0x0010 - 0x0000)
struct CrabPC_ServerSpawnKeyTotemPickup final
{
public:
	class ACrabTotem*                             KeyTotem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCrabPickupDA*                          PickupToSpawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ServerSpawnKeyTotemPickup) == 0x000008, "Wrong alignment on CrabPC_ServerSpawnKeyTotemPickup");
static_assert(sizeof(CrabPC_ServerSpawnKeyTotemPickup) == 0x000010, "Wrong size on CrabPC_ServerSpawnKeyTotemPickup");
static_assert(offsetof(CrabPC_ServerSpawnKeyTotemPickup, KeyTotem) == 0x000000, "Member 'CrabPC_ServerSpawnKeyTotemPickup::KeyTotem' has a wrong offset!");
static_assert(offsetof(CrabPC_ServerSpawnKeyTotemPickup, PickupToSpawn) == 0x000008, "Member 'CrabPC_ServerSpawnKeyTotemPickup::PickupToSpawn' has a wrong offset!");

// Function CrabChampions.CrabPC.ServerUploadLobbyStats
// 0x0058 (0x0058 - 0x0000)
struct CrabPC_ServerUploadLobbyStats final
{
public:
	struct FCrabLobbyStats                        LobbyStats;                                        // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPC_ServerUploadLobbyStats) == 0x000008, "Wrong alignment on CrabPC_ServerUploadLobbyStats");
static_assert(sizeof(CrabPC_ServerUploadLobbyStats) == 0x000058, "Wrong size on CrabPC_ServerUploadLobbyStats");
static_assert(offsetof(CrabPC_ServerUploadLobbyStats, LobbyStats) == 0x000000, "Member 'CrabPC_ServerUploadLobbyStats::LobbyStats' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerEquipCosmetics
// 0x0008 (0x0008 - 0x0000)
struct CrabPS_ServerEquipCosmetics final
{
public:
	class UMaterialInterface*                     NewCrabSkin;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerEquipCosmetics) == 0x000008, "Wrong alignment on CrabPS_ServerEquipCosmetics");
static_assert(sizeof(CrabPS_ServerEquipCosmetics) == 0x000008, "Wrong size on CrabPS_ServerEquipCosmetics");
static_assert(offsetof(CrabPS_ServerEquipCosmetics, NewCrabSkin) == 0x000000, "Member 'CrabPS_ServerEquipCosmetics::NewCrabSkin' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerEquipInventory
// 0x0018 (0x0018 - 0x0000)
struct CrabPS_ServerEquipInventory final
{
public:
	class UCrabWeaponDA*                          NewWeaponDA;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCrabAbilityDA*                         NewAbilityDA;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCrabMeleeDA*                           NewMeleeDA;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerEquipInventory) == 0x000008, "Wrong alignment on CrabPS_ServerEquipInventory");
static_assert(sizeof(CrabPS_ServerEquipInventory) == 0x000018, "Wrong size on CrabPS_ServerEquipInventory");
static_assert(offsetof(CrabPS_ServerEquipInventory, NewWeaponDA) == 0x000000, "Member 'CrabPS_ServerEquipInventory::NewWeaponDA' has a wrong offset!");
static_assert(offsetof(CrabPS_ServerEquipInventory, NewAbilityDA) == 0x000008, "Member 'CrabPS_ServerEquipInventory::NewAbilityDA' has a wrong offset!");
static_assert(offsetof(CrabPS_ServerEquipInventory, NewMeleeDA) == 0x000010, "Member 'CrabPS_ServerEquipInventory::NewMeleeDA' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerIncrementNumInventorySlots
// 0x0008 (0x0008 - 0x0000)
struct CrabPS_ServerIncrementNumInventorySlots final
{
public:
	ECrabPickupType                               PickupType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F6[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerIncrementNumInventorySlots) == 0x000004, "Wrong alignment on CrabPS_ServerIncrementNumInventorySlots");
static_assert(sizeof(CrabPS_ServerIncrementNumInventorySlots) == 0x000008, "Wrong size on CrabPS_ServerIncrementNumInventorySlots");
static_assert(offsetof(CrabPS_ServerIncrementNumInventorySlots, PickupType) == 0x000000, "Member 'CrabPS_ServerIncrementNumInventorySlots::PickupType' has a wrong offset!");
static_assert(offsetof(CrabPS_ServerIncrementNumInventorySlots, Cost) == 0x000004, "Member 'CrabPS_ServerIncrementNumInventorySlots::Cost' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerRefreshAccount
// 0x000C (0x000C - 0x0000)
struct CrabPS_ServerRefreshAccount final
{
public:
	ECrabRank                                     NewAccountRank;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14F7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewAccountLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewKeys;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerRefreshAccount) == 0x000004, "Wrong alignment on CrabPS_ServerRefreshAccount");
static_assert(sizeof(CrabPS_ServerRefreshAccount) == 0x00000C, "Wrong size on CrabPS_ServerRefreshAccount");
static_assert(offsetof(CrabPS_ServerRefreshAccount, NewAccountRank) == 0x000000, "Member 'CrabPS_ServerRefreshAccount::NewAccountRank' has a wrong offset!");
static_assert(offsetof(CrabPS_ServerRefreshAccount, NewAccountLevel) == 0x000004, "Member 'CrabPS_ServerRefreshAccount::NewAccountLevel' has a wrong offset!");
static_assert(offsetof(CrabPS_ServerRefreshAccount, NewKeys) == 0x000008, "Member 'CrabPS_ServerRefreshAccount::NewKeys' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerRemoveGrenadeMod
// 0x0001 (0x0001 - 0x0000)
struct CrabPS_ServerRemoveGrenadeMod final
{
public:
	ECrabGrenadeModType                           GrenadeModType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerRemoveGrenadeMod) == 0x000001, "Wrong alignment on CrabPS_ServerRemoveGrenadeMod");
static_assert(sizeof(CrabPS_ServerRemoveGrenadeMod) == 0x000001, "Wrong size on CrabPS_ServerRemoveGrenadeMod");
static_assert(offsetof(CrabPS_ServerRemoveGrenadeMod, GrenadeModType) == 0x000000, "Member 'CrabPS_ServerRemoveGrenadeMod::GrenadeModType' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerRemovePerk
// 0x0001 (0x0001 - 0x0000)
struct CrabPS_ServerRemovePerk final
{
public:
	ECrabPerkType                                 PerkType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerRemovePerk) == 0x000001, "Wrong alignment on CrabPS_ServerRemovePerk");
static_assert(sizeof(CrabPS_ServerRemovePerk) == 0x000001, "Wrong size on CrabPS_ServerRemovePerk");
static_assert(offsetof(CrabPS_ServerRemovePerk, PerkType) == 0x000000, "Member 'CrabPS_ServerRemovePerk::PerkType' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerRemoveRelic
// 0x0001 (0x0001 - 0x0000)
struct CrabPS_ServerRemoveRelic final
{
public:
	ECrabRelicType                                RelicType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerRemoveRelic) == 0x000001, "Wrong alignment on CrabPS_ServerRemoveRelic");
static_assert(sizeof(CrabPS_ServerRemoveRelic) == 0x000001, "Wrong size on CrabPS_ServerRemoveRelic");
static_assert(offsetof(CrabPS_ServerRemoveRelic, RelicType) == 0x000000, "Member 'CrabPS_ServerRemoveRelic::RelicType' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerRemoveWeaponMod
// 0x0001 (0x0001 - 0x0000)
struct CrabPS_ServerRemoveWeaponMod final
{
public:
	ECrabWeaponModType                            WeaponModType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerRemoveWeaponMod) == 0x000001, "Wrong alignment on CrabPS_ServerRemoveWeaponMod");
static_assert(sizeof(CrabPS_ServerRemoveWeaponMod) == 0x000001, "Wrong size on CrabPS_ServerRemoveWeaponMod");
static_assert(offsetof(CrabPS_ServerRemoveWeaponMod, WeaponModType) == 0x000000, "Member 'CrabPS_ServerRemoveWeaponMod::WeaponModType' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerSetAbilityDA
// 0x0008 (0x0008 - 0x0000)
struct CrabPS_ServerSetAbilityDA final
{
public:
	class UCrabAbilityDA*                         NewAbilityDA;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerSetAbilityDA) == 0x000008, "Wrong alignment on CrabPS_ServerSetAbilityDA");
static_assert(sizeof(CrabPS_ServerSetAbilityDA) == 0x000008, "Wrong size on CrabPS_ServerSetAbilityDA");
static_assert(offsetof(CrabPS_ServerSetAbilityDA, NewAbilityDA) == 0x000000, "Member 'CrabPS_ServerSetAbilityDA::NewAbilityDA' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerSetMeleeDA
// 0x0008 (0x0008 - 0x0000)
struct CrabPS_ServerSetMeleeDA final
{
public:
	class UCrabMeleeDA*                           NewMeleeDA;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerSetMeleeDA) == 0x000008, "Wrong alignment on CrabPS_ServerSetMeleeDA");
static_assert(sizeof(CrabPS_ServerSetMeleeDA) == 0x000008, "Wrong size on CrabPS_ServerSetMeleeDA");
static_assert(offsetof(CrabPS_ServerSetMeleeDA, NewMeleeDA) == 0x000000, "Member 'CrabPS_ServerSetMeleeDA::NewMeleeDA' has a wrong offset!");

// Function CrabChampions.CrabPS.ServerSetWeaponDA
// 0x0008 (0x0008 - 0x0000)
struct CrabPS_ServerSetWeaponDA final
{
public:
	class UCrabWeaponDA*                          NewWeaponDA;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrabPS_ServerSetWeaponDA) == 0x000008, "Wrong alignment on CrabPS_ServerSetWeaponDA");
static_assert(sizeof(CrabPS_ServerSetWeaponDA) == 0x000008, "Wrong size on CrabPS_ServerSetWeaponDA");
static_assert(offsetof(CrabPS_ServerSetWeaponDA, NewWeaponDA) == 0x000000, "Member 'CrabPS_ServerSetWeaponDA::NewWeaponDA' has a wrong offset!");

}

